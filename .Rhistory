scale <-1
par(mfrow=c(2,3))
PlotWaveCoeff(wcx,L,scale)
PlotWaveCoeff(wc0,L,scale)
PlotWaveCoeff(wc,L,scale)
plot(t, x, type="l")
plot(t, y, type="l")
plot(t,fest,type='l')
wc_TI <- FWT_TI(y,L,qmf)
hatsigma_TI <- madd(wc_TI[(2^(J-1)+1):2^J])
thr_TI <- sqrt(2*log(length(y)))*hatsigma_TI
wc_TI[(2^(L)+1):n] <- HardThresh(wc_TI[(2^(L)+1):n],thr_TI)
fest_TI <- IWT_TI(wc_TI,L)
snrout_TI <- SNR(f,fest_TI)
plot(t,fest_TI,type='l',lwd=1.4,col='red',xlab="t",ylab="hat_f(t)",
main=format(round(snrout_TI,2), nsmall = 2))
matlines(t,f,type='l',lty=2)
devtools::load_all()
J <- 10; n <- 2^J; t <- (1:n)/n
name <- c('HeaviSine')
f <- MakeSignal(name,n)
plot(t,f,xlab="t",ylab="f(t)",
type='l',lwd=1.2, main=name)
SNR <- 5
set.seed(1)
ssig <- sd(f)
sigma <- ssig/SNR
y <- f + rnorm(n,mean=0,sd=sigma)
plot(t,y,xlab="t",ylab="y", main=paste("Noisy",name))
qmf <- MakeONFilter('Daubechies',10)
L <- 3
wc <- FWT_PO(y,L,qmf)
PlotWaveCoeff(wc,L,0.5)
hatsigma <- madd(wc[(2^(J-1)+1):2^J])
thr <- sqrt(2*log(length(y)))*hatsigma
wc[(2^(L)+1):n] <- HardThresh(wc[(2^(L)+1):n],thr)
fest <- IWT_PO(wc,L,qmf)
snrout <- SNR(f,fest)
plot(t,fest,type='l',lwd=1.4,col='red',xlab="t",ylab="hat_f(t)",
main=format(round(snrout,2), nsmall = 2))
matlines(t,f,type='l',lty=2)
wc_TI <- FWT_TI(y,L,qmf)
hatsigma_TI <- madd(wc_TI[(2^(J-1)+1):2^J])
thr_TI <- sqrt(2*log(length(y)))*hatsigma_TI
wc_TI[(2^(L)+1):n] <- HardThresh(wc_TI[(2^(L)+1):n],thr_TI)
fest_TI <- IWT_TI(wc_TI,L)
snrout_TI <- SNR(f,fest_TI)
plot(t,fest_TI,type='l',lwd=1.4,col='red',xlab="t",ylab="hat_f(t)",
main=format(round(snrout_TI,2), nsmall = 2))
matlines(t,f,type='l',lty=2)
wc_TI <- FWT_TI(y,L,qmf)
hatsigma_TI <- madd(wc_TI[(2^(J-1)+1):2^J])
thr_TI <- sqrt(2*log(length(y)))*hatsigma_TI
wc_TI[(2^(L)+1):n] <- HardThresh(wc_TI[(2^(L)+1):n],thr_TI)
fest_TI <- IWT_TI(wc_TI,L)
snrout_TI <- SNR(f,fest_TI)
plot(t,fest_TI,type='l',lwd=1.4,col='red',xlab="t",ylab="hat_f(t)",
main=format(round(snrout_TI,2), nsmall = 2))
matlines(t,f,type='l',lty=2)
devtools::use_data()
pryr::mem_used()
library(dplyr)
pryr::mem_used()
devtools::use_data_raw()
library(imager)
library(imager)
name <- 'lena.jpg'
f <- load.image(name)
library(rwavelab)
data()
tools::checkRdaFiles()
devtools::document()
library(imager)
name <- 'lena.png'
f <- load.image(name)
plot(f,axes=F,interpolate = F)
library(imager)
name <- 'data/lena.png'
f <- load.image(name)
plot(f,axes=F,interpolate = F)
library(imager)
name <- 'data/lena.png'
f <- load.image(name)
plot(f,axes=F)
library(imager)
getwd()
name <- 'lena.png'
f <- load.image(name)
library(imager)
getwd()
name <- 'lena.png'
f <- load.image(name)
plot(f,axes=F,interpolate = F)
library(imager)
name <- 'lena.png'
f <- load.image(name)
plot(f,axes=F,interpolate = F)
library(imager)
name <- 'lena.png'
f <- load.image(name)
plot(f,axes=F,interpolate = F)
getwd()
library(imager)
name <- 'data/lena.png'
f <- load.image(name)
plot(f,axes=F,interpolate = F)
library(imager)
name <- 'data/lena.png'
f <- load.image(name)
plot(f,axes=F,interpolate = T)
library(imager)
name <- 'data/lena.png'
f <- load.image(name)
plot(f,axes=F,xlab = "")
library(imager)
name <- 'data/lena.png'
f <- load.image(name)
plot(f,axes=F,xlab = "",ylab="")
library(imager)
name <- 'lena.png'
f <- load.image(name)
plot(f, axes=F, interpolate = F, xlab="", ylab="")
library(imager)
name <- 'lena.png'
f <- load.image(name)
plot(f, axes=F, interpolate = F, xlab="", ylab="")
library(imager)
name <- 'lena.png'
f <- load.image(name)
plot(f, axes=F, interpolate = F, xlab="", ylab="")
ssig <- sd(f)
sdnoise <- ssig/SNR
y <- f + rnorm(ncol(f)*nrow(f), mean=0, sd=sdnoise)
snrout <- snr(f,y)
ssig <- sd(f)
sdnoise <- ssig/SNR
y <- f + rnorm(ncol(f)*nrow(f), mean=0, sd=sdnoise)
snrout <- SNR(f,y)
plot(y,axes=F,interpolate = F)
library(imager)
name <- 'lena.png'
f <- load.image(name)
plot(f, axes=F, interpolate = F, xlab="", ylab="")
ssig <- sd(f)
sdnoise <- ssig/SNR
y <- f + rnorm(ncol(f)*nrow(f), mean=0, sd=sdnoise)
snrout <- SNR(f,y)
plot(y, axes=F,interpolate = F)
library(imager)
name <- 'lena.png'
f <- load.image(name)
ssig <- sd(f)
sdnoise <- ssig/SNR
y <- f + rnorm(ncol(f)*nrow(f), mean=0, sd=sdnoise)
snrout <- SNR(f,y)
op <- par(mfrow=c(1,3), mgp = c(1.2, 0.5, 0), tcl = -0.2,
mar = .1 + c(0.7,0.1,0.7,0.1), oma = c(0,0,0,0))
plot(f, axes=F, interpolate=F, xlab="", ylab="")
plot(y, axes=F, interpolate=F, xlab="", ylab="")
library(imager)
name <- 'lena.png'
f <- load.image(name)
ssig <- sd(f)
sdnoise <- ssig/SNR
y <- f + rnorm(ncol(f)*nrow(f), mean=0, sd=sdnoise)
snrout <- SNR(f,y)
op <- par(mfrow=c(1,2))
plot(f, axes=F, interpolate=F, xlab="", ylab="")
plot(y, axes=F, interpolate=F, xlab="", ylab="")
library(imager)
name <- 'lena.png'
f <- load.image(name)
plot(f, axes=F, interpolate=F, xlab="", ylab="")
ssig <- sd(f)
sdnoise <- ssig/SNR
y <- f + rnorm(ncol(f)*nrow(f), mean=0, sd=sdnoise)
snrout <- SNR(f,y)
plot(y, axes=F,interpolate = F)
ssig <- sd(f)
sdnoise <- ssig/SNR
y <- f + rnorm(ncol(f)*nrow(f), mean=0, sd=sdnoise)
snrout <- SNR(f,y)
plot(y, axes=F, interpolate=F, xlab="", ylab="")
wc <- FWT2_PO(as.array(squeeze(y)),L,qmf)
library(rwavelab)
formatR::tidy_dir("R",width.cutoff = 76,arrow = T,indent=2)
lintr::lint_package()
library(rwavelab)
formatR::tidy_dir("R",width.cutoff = 76,arrow = T,indent=2)
library(rwavelab)
lintr::lint_package()
wc <- FWT2_PO(as.array(squeeze(y)),L,qmf)
rmarkdown::render("rwavelab.Rmd", output_format="all")
getwd()
rmarkdown::render("vignettes/rwavelab.Rmd", output_format="all")
demo()
library(rwavelab)
library(rwavelab)
formatR::tidy_dir("R",width.cutoff = 76,arrow = T,indent=2)
library(rwavelab)
library(rwavelab)
help(iconv)
help(aconv)
aconv
aconv()
DownDyadHi
DownDyadHi()
DownDyadH
library(rwavelab)
rwavelab::aconv()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
formatR::tidy_dir("R",width.cutoff = 76,arrow = T,indent=2)
lintr::lint_package()
source('~/Documents/ENSAI_ALL/contratILB/lab/R/load_data.R')
source('~/.active-rstudio-document')
source('~/Documents/ENSAI_ALL/contratILB/lab/R/load_data.R')
dim(df1)
dim(df2)
source('~/.active-rstudio-document')
str(df1)
miss_df1
miss_df2
miss_df2>0
miss_df2[miss_df2>0]
df2$SIREN[1]
df2$EHID[1]
df2$X3[1]
df2$X3[2]
df1$SIREN[1]
dim(TF1)
dim(df1)
table(df1$THD_STA_C)
source('~/.active-rstudio-document')
table(df1$THD_STA_C)
table(df1$THD_STA_ORI_C)
length(table(df1$THD_STA_ORI_C))
length(table(df1$Variable.Y))
length(table(df1$THD_STA_C))
table(df1$THD_STA_C)
table(df1$LEGAL_MIN_EMP_Q)
table(df1$LEGAL_MIN_EMP_Q)
table(df1$LEGAL_MAX_EMP_Q)
table(df1$LEGAL_MAX_EMP_Q)
df1$LEGAL_MAX_EMP_Q[1]
df1$LEGAL_MAX_EMP_Q[1:10]
df1$LEGAL_MIN_EMP_Q[1:10]
table(df1$LEGAL_MIN_EMP_Q[1:100])
table(df1$LEGAL_MAX_EMP_Q[1:100])
dim(df2)
source('~/Documents/ENSAI_ALL/contratILB/lab/R/load_data.R')
dim(df2)
source('~/.active-rstudio-document')
df2$
a@
$
dim(df2)
names(df2)[1:3]
names(df2)[1:10]
table((df2$X5))
table((df2$X7))
formatR::tidy_dir("R",width.cutoff = 76,arrow = T,indent=2)
lintr::lint_package()
help(rbind)
help(iconv)
help(mad)
help(MAD)
help(upsamble)
help(upsample)
formatR::tidy_dir("R",width.cutoff = 76,arrow = T,indent=2)
lintr::lint_package()
tools::vignetteEngine()
formatR::tidy_dir("R",width.cutoff = 76,arrow = T,indent=2)
lintr::lint_package()
devtools::load_all()
roxygen2::roxygenise()
help(MAD)
devtools::load_all()
help(MakeSignal)
devtools::document()
devtools::document()
search()
library(testthat)
expect_equal(1, 1)
setdiff(search(), old)
devtools::document()
library(rwavelet)
devtools::document()
library(rwavelet)
help(SNR)
library(imager)
help(SNR)
# Store output format for later use
options(vignetteDocumentFormat= rmarkdown::all_output_formats("rwavelet.Rmd"))
# compiler la ligne suivante pour avoir un pdf
rmarkdown::render("rwavelab.Rmd", output_format="htlm")
# Store output format for later use
options(vignetteDocumentFormat= rmarkdown::all_output_formats("rwavelet.Rmd"))
# compiler la ligne suivante pour avoir un pdf
rmarkdown::render("rwavelet.Rmd", output_format="htlm")
# Store output format for later use
options(vignetteDocumentFormat= rmarkdown::all_output_formats("rwavelet.Rmd"))
# compiler la ligne suivante pour avoir un pdf
rmarkdown::render("rwavelet.Rmd", output_format="html")
help(rmarkdown::render)
# Store output format for later use
options(vignetteDocumentFormat= rmarkdown::all_output_formats("rwavelet.Rmd"))
# compiler la ligne suivante pour avoir un pdf
rmarkdown::render("rwavelet.Rmd", output_format="html_document")
dir()
# Store output format for later use
options(vignetteDocumentFormat= rmarkdown::all_output_formats("rwavelet.Rmd"))
# compiler la ligne suivante pour avoir un pdf
rmarkdown::render("vignettes/rwavelet.Rmd", output_format="html_document")
# Store output format for later use
options(vignetteDocumentFormat= rmarkdown::all_output_formats("rwavelet.Rmd"))
# compiler la ligne suivante pour avoir un pdf
rmarkdown::render("rwavelet.Rmd", output_format="html_document")
library(rwavelet)
devtools::check()
library(rwavelet)
devtools::check()
library(rwavelet)
library(rwavelet)
devtools::check()
library(rwavelet)
library(rwavelet)
devtools::check()
# Store output format for later use
options(vignetteDocumentFormat= rmarkdown::all_output_formats("rwavelet.Rmd"))
# compiler la ligne suivante pour avoir un pdf
#rmarkdown::render("rwavelet.Rmd", output_format="html_document")
devtools::load_all()
par(mgp = c(2,0.5,0),
mar = c(4,3,2,1),
oma = c(1,1,0,0))
J <- 10; n <- 2^J; t <- (1:n) / n
name <- c('Bumps')
f <- MakeSignal(name, n)
plot(t, f, xlab="t", ylab="f(t)",
type='l', lwd=1.2, main=name)
SNR <- 4
set.seed(1)
ssig <- sd(f)
sigma <- ssig / SNR
y <- f + rnorm(n, mean=0, sd=sigma)
plot(t, y, xlab="t", ylab="y", main=paste("Noisy", name))
qmf <- MakeONFilter('Daubechies', 10)
L <- 3
wc <- FWT_PO(y, L, qmf)
PlotWaveCoeff(wc, L, 0.5)
hatsigma <- MAD(wc[(2^(J-1)+1):2^J])
thr <- sqrt(2*log(length(y)))*hatsigma
wc[(2^(L)+1):n] <- HardThresh(wc[(2^(L)+1):n], thr)
fest <- IWT_PO(wc, L, qmf)
snrout <- SNR(f, fest)
plot(t, fest, type='l', lwd=1.4, col='red', xlab="t", ylab="hat_f(t)",
main=format(round(snrout,2), nsmall=2))
matlines(t, f, type='l', lty=2)
library(imager)
f
write(file = "test.Rda",f)
dir()
rm(list=ls)
rm(list=ls())
load("/Users/fnavarro/Desktop/SUMMER15/ENSAI2015-2016/PackageR/rwavelet/test.Rda")
library(rwavelet)
roxygen2::roxygenise()
devtools::document()
library(rwavelet)
library(rwavelet)
library(rwavelet)
library(rwavelet)
library(rwavelet)
library(rwavelet)
library(rwavelet)
library(rwavelet)
library(rwavelet)
library(rwavelet)
library(rwavelet)
library(rwavelet)
library(rwavelet)
library(rwavelet)
help(DownDyadHi)
help(DownDyadHi)
library(rwavelet)
help(plot)
help(par)
help(axis)
help(box)
library(rwavelet)
library(rwavelet)
library(rwavelet)
library(rwavelet)
library(rwavelet)
MakeONFilter('Haar')
MakeONFilter('Haar',1)
library(rwavelet)
MakeONFilter('Haar',1)
library(rwavelet)
installed.packages()
getOption("max.print")
installed.packages()
installed.packages('')
installed.packages('r')
installed.packages('r*')
installed.packages(r)
installed.packages('rwavelab')
installed.packages(MakeONFilter)
MakeONFilter
MakeONFilter()
devtools::load_all()
MakeONFilter()
devtools::load_all("haar")
devtools::load_all("Haar")
devtools::load_all("Haar",1)
MakeONFilter("Haar",1)
qmf <-  MakeONFilter("Haar",1)
qmf
library(rwavelet)
library(rwavelet)
MakeONFilter("Haar",1)
devtools::load_all()
MakeONFilter("Haar",1)
MakeONFilter("Haar")
MakeSignal("Bumps")
MakeSignal("Bumps",2^5)
MakeSignal("Bumps",2^3)
plot(MakeSignal("Bumps",2^3))
plot(MakeSignal("Heavysine",2^3))
plot(MakeSignal("HeaviSine",2^3))
DownDyadHi(x, qmf)
x <- MakeSignal("HeaviSine",2^3)
DownDyadHi(x, qmf)
MakeSignal("HeaviSine",2^3)
MakeSignal("HeaviSine",2^3)
library(rwavelet)
library(rwavelet)
devtools::load_all(".")
MakeONFilter()
library(rwavelet)
install.packages("rwavelet")
library(rwavelet)
library(rwavelet)
library(rwavelet)
library(rwavelet)
library(rwavelet)
library(rwavelet)
search()
devtools::create()
devtools::check()
devtools::run_examples()
library(rwavelet)
devtools::run_examples()
devtools::load_all()
devtools::run_examples()
aconv(1,1)
library(rwavelet)
aconv(1,1)
devtools::load_all()
devtools::run_examples()
library(rwavelet)
aconv
library(rwavelet)
devtools::run_examples()
library(rwavelet)
devtools::run_examples()
library(rwavelet)
devtools::run_examples()
devtools::document()
devtools::document()
library(rwavelet)
devtools::run_examples()
dyad(1:3)
dyad(100)
dyad(1)
dyad(2)
dyad(0)
library(rwavelet)
devtools::run_examples()
dyadlength(1:2)
dyadlength(1:3)
dyadlength(2)
dyadlength(4)
dyadlength(2:4)
dyadlength(2:4)
MakeSignal("HeavySine")
MakeSignal("HeavySine",8)
MakeSignal("HeaviSine",8)
MakeSignal("Ramp",8)
library(rwavelet)
devtools::run_examples()
library(rwavelet)
devtools::run_examples()
library(rwavelet)
devtools::run_examples()
library(rwavelet)
devtools::use_travis()
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
